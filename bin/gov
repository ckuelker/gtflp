#!/usr/bin/bash
# +---------------------------------------------------------------------------+
# | gov                                                                       |
# |                                                                           |
# | A simple colored status tool. It shows green committed files, cyan/orange |
# | modified files and red untracked files. At the top you can see the path   |
# | of the git repository. The name 'gov' stands for 'git overview'.          |
# |                                                                           |
# | gtd                                                                       |
# |                                                                           |
# | A simple colored status tool. It shows cyan/orange  modified files and    |
# | red untracked files. At the top you can see the path of the git           |
# | repository. This is simialr to 'git status' but shorter and faster to     |
# | understand. The name 'gtd' stands for 'git to do'.                        |
# |                                                                           |
# | Version: 0.1.2 (change inline)                                            |
# |                                                                           |
# | Changes:                                                                  |
# |                                                                           |
# | 0.1.2 2023-03-19 Christian Külker <c@c8i.org>                             |
# |     - Merge previous independent gtd script                               |
# |     - Add more debug output                                               |
# |     - Fix some debug outout                                               |
# |     - Fix a STATUS issue, not detecting modified files                    |
# |     - Add git sub-module warning                                          |
# | 0.1.1 2023-03-18 Christian Külker <c@c8i.org>                             |
# |     - Release within the gtflp project on github.com/ckuelker/gtflp       |
# | 0.1.0 2019-12-03 Christian Külker <c@c8i.org>                             |
# |     - Initial release                                                     |
# |                                                                           |
# +---------------------------------------------------------------------------+
#
# REMARK: The zsh plugin 'oh-my-zsh' already defined the alias 'gst' in
#         ~/.oh-my-zsh/plugins/git/git.plugin.zsh. You could replace it with
#         gov, but if you only rename gov to gst, the alias will win and not
#         gov.
#
#         This scripts do not handle (or detect) git sub-modules
#
VERSION=0.1.2
L=`printf %80s |tr " " "="`
l=`printf %80s |tr " " "-"`
RED='\033[0;31m'
ORANGE='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m'
PWD=`pwd`
SLF=`basename $0`

function debug {
        if [ -n "$GTFLP_DEBUG" ];then
                echo "GTFLP DEBUG $VERSION $1"
        fi
}
function warn {
        echo -e "${ORANGE}$L\nWARNING: $1 \n$L${NC}"
}

# Dispatch with and w/o PATH invocation
if [ -z "$1" ]; then # ............. No PATH
        debug "Env no PATH"
        DIR="$PWD";
        GIT="$PWD/.git";
else
        if [[ "$1" =~ ^/ ]]; then # Absoulte PATH
               debug "Env absolute PATH"
               DIR="$1";
               GIT="$1/.git";
        else # .................... Relative PATH
               debug "Env relative PATH"
               DIR="$PWD/$1";
               GIT="$PWD/$1/.git";
        fi
fi
debug "SLF  [$SLF] self"
debug "PWD  [$PWD] print working directory"
debug "DIR  [$DIR] current directory PWD+ARGV"
debug "GIT  [$GIT] repo guess from DIR"
if [ -n "$1" ]; then # PATH
        debug "ARGV [$1]"
fi
if [ -f "$GIT" ]; then
        W="Directory [$DIR] might be a git sub-module. As of $SLF $VERSION git"
        WARN="$W sub-modules are not handled. Use 'git status'."
        warn "$WARN"
fi
debug $L
if REP=`git -C $DIR rev-parse --git-dir 2>/dev/null|egrep -e '.git$'`; then
        debug "REP [$REP] repository"
        if [ "$REP" = ".git" ]; then
                GBD=$DIR
        else
                GBD=`echo "$REP"|sed -e 's%/\.git$%%'`
        fi
        debug "GBD [$GBD] git base directory"
        echo $GBD
        debug $l
        debug "Tracked files: (if any, modified and unmodified)"
        for file in `git -C $DIR ls-tree -r --name-only HEAD|sort`;do
                debug "Process file [$file]"
                STATUS=`git -C $DIR status -s $file`
                debug "STATUS [$STATUS] Status if file"
                if [ " M $file" = "$STATUS" ]; then # Modified
                        debug "Modified"
                        echo -e "${ORANGE}$file${NC}"
                else # ........................... Not Modified
                        debug "Not modified"
                        if [ "$SLF" = "gov" ]; then
                                debug "Show not modified only for gov"
                                echo -e "${GREEN}$file${NC}"
                        fi
                fi
        done
        debug $l
        debug "Untracked files: (if any)"
        for file in `git -C $DIR ls-files --others --exclude-standard|sort`;do
                echo -e "${RED}$file${NC}"
        done
        debug $L
else
        cat << EOF
$L
ERROR:

    This directory [$DIR] is NOT a git repository.

    - Consider entering a git repository
    - Or use 'gov [DIR]' to display the status of a child directory

USAGE:

    gov       - Print the status of the current git repository

    gov [DIR] - Enter the git repository via the path DIR and print the current
                status of that directory
DEBUG:

     export GTFLP_DEBUG=1

$L
EOF
fi

exit 0;

